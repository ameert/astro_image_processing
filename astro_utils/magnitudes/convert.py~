from astro_utils.user_params import *

def mag_to_counts( mag, aa, kk = 0 , airmass = 0):
    """#++++++++++++++++++++++++++
#
# TITLE: mag_to_counts
#
# PURPOSE: converts magnitudes to counts
#
# INPUTS: mag-magnitude
#         magerr-error on magnitudes
#         band-str representing the band if using asinh  
#         zeropoint-zeropoint
#         kk-extinction coefficeint
#         airmass-the airmass value
#         magtype-pogson(default) or asinh 
#         
# OUTPUTS: returns counts
#
# PROGRAM CALLS: astro_utils.user_params
#
# BY: Alan Meert
#     Department of Physics and Astronomy
#     University of Pennsylvania
#
# DATE: 1 Feb 2011
# 
# NOTE: This uses the bands and softening 
#       params given in the user_params file
#       
#-----------------------------------
"""

    exptime = 53.907456 #in seconds, taken from SDSS website www.sdss.org/dr3/algorithms/fluxcal.html
    return exptime * (10**(-.4*mag)) / (10**(0.4*(aa + kk*airmass)))



def counts_to_mag(counts, error, band, aa, kk = 0.0, airmass= 0.0, pogson = True, exptime = exptime_default):
    exptime = 53.907456 #in seconds, taken from SDSS website www.sdss.org/dr3/algorithms/fluxcal.html
    softb = {'u': 1.4e-10,'g': 9.0e-11,'r': 1.2e-10,'i': 1.8e-10,'z': 7.4e-10}
    
    fluxrate =(counts/exptime)* 10**(0.4*(aa + kk*airmass))

    if pogson:
        mag = -2.5 * np.log10(fluxrate)
        magerr = 2.5/np.log(10) * error/counts
    else:
        mag = -2.5/np.log(10)*(np.arcsinh(fluxrate/(2.0*softb[band]))+np.log(softb[band]))
        magerr = 2.5/np.log(10) * error/(exptime *0.5*softb[band])*10**(0.4*(aa + kk*airmass))/np.sqrt(1+(fluxrate/(2.0*softb[band]))**2.0)
                          
    return mag, magerr
