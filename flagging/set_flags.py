#++++++++++++++++++++++++++
#
# TITLE: set_flags
#
# PURPOSE: assigns flags to galaxies
#          based on the ranges set by 
#          params.txt generated by 
#          flag_gals.txt
#
# INPUTS: params.txt created by flag_gals.py
#
# OUTPUTS: 
#
# PROGRAM CALLS:
#
# BY: Alan Meert
#     Department of Physics and Astronomy
#     University of Pennsylvania
#
# DATE: written 2012 modified 2013
#
#-----------------------------------

from mysql.mysql_class import *
import random as rand
import pylab as pl
import pyfits as pf
import numpy as np
import scipy as sci
import os
import sys

def conv_vals(line):
    line = line[1:-1] # remove parentheses
    line = line.split(',')
    return (float(line[0]),float(line[1]))

def angdiff(theta1, theta2, ba):
    theta1 = np.deg2rad(theta1)
    theta2 = np.deg2rad(theta2)
    vec1 = np.array([np.cos(theta1), np.sin(theta1)])
    vec2 = np.array([np.cos(theta2), np.sin(theta2)])
    dot = np.sum(vec1*vec2, axis = 0)
    diff = np.minimum(np.arccos(dot),np.arccos(-1.0*dot))
    diff = np.rad2deg(diff)*(1.0-ba)
    return diff


cursor = mysql_connect('classify','pymorph','pymorph','')

info = [('dev',['r_bulge', 'ba_bulge','pa_bulge']), 
        ('ser',['r_bulge', 'n_bulge','ba_bulge','pa_bulge']),
        ('devexp',['r_bulge','ba_bulge','pa_bulge','r_disk','ba_disk',
                   'pa_disk','BT']) ,
        ('serexp',['r_bulge','n_bulge','ba_bulge','pa_bulge','r_disk','ba_disk',
                   'pa_disk','BT'])]

infile = open("params.txt")

for line in infile.readlines():
    line = line.split()
    model = line[0]
    param = line[1]
    gr = conv_vals(line[2])
    gi = conv_vals(line[3])
    ri = conv_vals(line[4])
        
    data = cursor.get_data('select a.galcount, a.{param}, b.{param}, c.{param}, a.ba_bulge, b.ba_bulge, c.ba_bulge, a.ba_disk, b.ba_disk, c.ba_disk from catalog.g_band_{model} as a, catalog.r_band_{model} as b, catalog.i_band_{model} as c where a.galcount = b.galcount and a.galcount = c.galcount;'.format(model = model, param = param)) 

    data = [np.array(d) for d in data]
    if param =='pa_bulge':
        gr_diff = angdiff(data[1],data[2],data[5])
        gi_diff = angdiff(data[1],data[3],data[6])
        ri_diff = angdiff(data[2],data[3],data[6])
    elif param == 'pa_disk':
        gr_diff = angdiff(data[1],data[2],data[8])
        gi_diff = angdiff(data[1],data[3],data[9])
        ri_diff = angdiff(data[2],data[3],data[9])
    else:
        gr_diff = ((data[1]-data[2]) - gr[0])
        gi_diff = ((data[1]-data[3]) - gi[0])
        ri_diff = ((data[2]-data[3]) - ri[0])
    
    gr_diff /= gr[1]
    gi_diff /= gi[1]
    ri_diff /= ri[1]  
    

    gr_diff = np.where( np.isnan(gr_diff),0,np.abs(gr_diff))
    gi_diff = np.where( np.isnan(gi_diff),0,np.abs(gi_diff))
    ri_diff = np.where( np.isnan(ri_diff),0,np.abs(ri_diff))
    
    #tot = np.maximum(np.floor(gr_diff), np.floor(gi_diff))
    #tot = np.maximum(tot, np.floor(ri_diff))
    tot = np.sqrt(np.mean((np.array([gr_diff,gi_diff,ri_diff]))**2.0, axis =0) )

    for gal, t_d, t_gr, t_gi, t_ri in zip(data[0].astype(int),tot,gr_diff,gi_diff,ri_diff):
        cursor.execute('update agree_{model} set {param}_tot={flag},{param}_gr={flag_gr}, {param}_gi={flag_gi},{param}_ri={flag_ri} where galcount = {galcount};'.format(model = model, param = param, flag = t_d, flag_gr = t_gr,flag_gi = t_gi, flag_ri = t_ri, galcount = gal))        
        #break

infile.close()

cmd = 'update agree_dev set total = sqrt((pow(r_bulge_tot,2)+pow(ba_bulge_tot,2)+pow(pa_bulge_tot, 2))/3);'
cursor.execute(cmd)
cmd = 'update agree_ser set total = sqrt((pow(r_bulge_tot,2)+pow(n_bulge_tot, 2)+pow(ba_bulge_tot,2)+pow(pa_bulge_tot, 2))/4);'
cursor.execute(cmd)
cmd = 'update agree_devexp set total = sqrt((pow(r_bulge_tot,2)+pow(ba_bulge_tot,2)+pow(pa_bulge_tot, 2)+pow(r_disk_pix_tot,2)+pow(ba_disk_tot,2)+pow(pa_disk_tot, 2)+pow(BT_tot,2))/7);'
#cursor.execute(cmd)
cmd = 'update agree_serexp set total = sqrt((pow(r_bulge_tot,2)+pow(n_bulge_tot, 2)+pow(ba_bulge_tot,2)+pow(pa_bulge_tot, 2)+pow(r_disk_tot,2)+pow(ba_disk_tot,2)+pow(pa_disk_tot, 2)+pow(BT_tot,2))/8);'
#cursor.execute(cmd)

for band in ['gr','gi','ri']:
    for model in ['dev','ser']:#,'devexp','serexp']:
        param_count = 3
        cmd = 'update agree_{model} set total_{band} = sqrt(pow(r_bulge_{band},2)+pow(ba_bulge_{band},2)+pow(pa_bulge_{band}, 2)'
        if model in ['ser', 'serexp']:
            cmd += '+pow(n_bulge_{band}, 2)'
            param_count +=1
        if model in ['devexp','serexp']:
            cmd += '+pow(r_disk_{band},2)+pow(ba_disk_{band},2)+pow(pa_disk_{band}, 2)+pow(BT_{band},2)'
            param_count +=4
        cmd += '/%d);' %param_count
        cmd = cmd.format(band=band, model = model)
        print cmd
        cursor.execute(cmd)

